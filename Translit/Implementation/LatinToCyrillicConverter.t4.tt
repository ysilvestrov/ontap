<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#	
	var dir = Path.GetDirectoryName(this.Host.TemplateFile);	
	var txt = File.ReadAllText(Path.Combine(dir, "Rules.txt"));

	var cult = new []
	{
		CultureInfo.InvariantCulture,
		new CultureInfo("ru-RU"),
		new CultureInfo("be-BY"),
		new CultureInfo("uk-UA"),
		new CultureInfo("bg-BG"),
		new CultureInfo("mk-MK")
	};

	var rules = new []
	{
		new List<Tuple<char, string>>(),
		new List<Tuple<char, string>>(),
		new List<Tuple<char, string>>(),
		new List<Tuple<char, string>>(),
		new List<Tuple<char, string>>(),
		new List<Tuple<char, string>>()
	};

	var ToUpper = new Func<string, CultureInfo, string>((v, f) => {
		var arr = v.ToCharArray();
		arr[0] = char.ToUpper(arr[0], f);
		return new string(arr);
	});

	var query = txt
		.Split(new [] {Environment.NewLine}, StringSplitOptions.RemoveEmptyEntries)
		.Skip(1);

	foreach (var line in query)
	{
		var strs = line
			.Split(new char[] {'\t'}, StringSplitOptions.None)
			.Select(v => ((v ?? "").Trim().Length > 0) ? v.Trim() : null)
			.ToArray();

		if (strs[0].Trim().Length != 1) throw new Exception("Invalid char length");				
		var key = strs[0][0];
		
		strs[0] = strs[1] ?? strs[2] ?? strs[3] ?? strs[4] ?? strs[5];		
				
		for (var i = 0; i < 6; i++)
		{
			if (strs[i] == null) continue;

			var values = strs[i]
				.Split(new char[] {','}, StringSplitOptions.RemoveEmptyEntries)
				.Select(v => v.Trim());		
			
			foreach (var val in values)
			{
				var lowerKey = char.ToLower(key, cult[i]);
				if ((int)lowerKey != (int)key) 
					rules[i].Add(new Tuple<char, string>(lowerKey, val));
				rules[i].Add(new Tuple<char, string>(key, ToUpper(val, cult[i])));
			}
		}
	}		
#>

// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Generated at <#=DateTime.Now.ToString("u")#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace NickBuhro.Translit.Implementation
{
	partial struct LatinToCyrillicConverter
	{
		private struct ConvertRule
		{
			public readonly string Latin;
			public readonly string Cyrillic;

			public ConvertRule(string cyrillic, string latin)
			{
				Cyrillic = cyrillic;
				Latin = latin;				
			}
		}

		private static readonly ConvertRule[][] Rules = new []
		{
<# for (var i = 0; i < 6; i++) { #>
			new [] // <#=cult[i].Name#>
			{
<# foreach (var t in rules[i].OrderBy(t => -t.Item2.Length)) { #>
			    new ConvertRule("<#=t.Item1#>", @"<#=t.Item2#>"),
<# } #>
			},
<# } #>
		
		};
	}
}
